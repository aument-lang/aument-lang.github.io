const codes={"brainfuck.au":"// The simplest Turing-complete language written in Aument\r\n// https://en.wikipedia.org/wiki/Brainfuck\r\n\r\nlet instructions = str::bytes(io::input());\r\nlet ilen = list::len(instructions);\r\nlet tape = array::repeat(0, 8192);\r\nlet ip = 0;\r\nlet dp = 0;\r\nwhile ip < ilen {\r\n  let current_insn = instructions[ip];\r\n  if current_insn == '>'c {\r\n    dp += 1;\r\n  } else if current_insn == '<'c {\r\n    dp -= 1;\r\n  } else if current_insn == '+'c {\r\n    tape[dp] += 1;\r\n  } else if current_insn == '-'c {\r\n    tape[dp] -= 1;\r\n  } else if current_insn == '.'c {\r\n    print str::char(tape[dp]);\r\n  } else if current_insn == ','c {\r\n    tape[dp] = int::into(io::input());\r\n  } else if current_insn == '['c {\r\n    if tape[dp] == 0 {\r\n      let loop = 1;\r\n      while loop > 0 {\r\n        ip += 1;\r\n        current_insn = instructions[ip];\r\n        if current_insn == '['c {\r\n          loop += 1;\r\n        } else if current_insn == ']'c {\r\n          loop -= 1;\r\n        }\r\n      }\r\n    }\r\n  } else if current_insn == ']'c {\r\n    let loop = 1;\r\n    while loop > 0 {\r\n      ip -= 1;\r\n      let current_insn = instructions[ip];\r\n      if current_insn == '['c {\r\n        loop -= 1;\r\n      } else if current_insn == ']'c {\r\n        loop += 1;\r\n      }\r\n    }\r\n    ip -= 1;\r\n  }\r\n  ip += 1;\r\n}","class.au":"struct Human { name }\r\n\r\nfunc human(name) {\r\n  return new Human {\r\n    name: name\r\n  };\r\n}\r\n\r\nfunc (self: Human) say() {\r\n  print \"I'm \", @name, \"\\n\";\r\n}\r\n\r\nstruct Cat;\r\n\r\nfunc (self: Cat) say() {\r\n  print \"meow!\";\r\n}\r\n\r\nlet alice = human(\"Alice\");\r\nlet bob = human(\"Bob\");\r\nlet cat = new Cat;\r\n\r\nalice.say();\r\nbob.say();\r\ncat.say();\r\n","fib.au":"func fib(n) {\r\n  if n <= 1 {\r\n    return n;\r\n  }\r\n  return fib(n - 1) + fib(n - 2);\r\n}\r\n\r\nprint fib(28);\r\n","fizzbuzz.au":"let i = 0;\r\nwhile i < 100 {\r\n  if i % 3 == 0 && i % 5 == 0 {\r\n    print \"Fizzbuzz\\n\";\r\n  } else if i % 3 == 0 {\r\n    print \"Fizz\\n\";\r\n  } else if i % 5 == 0 {\r\n    print \"Buzz\\n\";\r\n  } else {\r\n    print i, \"\\n\";\r\n  }\r\n  i = i + 1;\r\n}\r\n","mandelbrot.au":"// Mandelbrot example adopted from Wren\r\n// https://github.com/wren-lang/wren/blob/main/example/mandelbrot.wren\r\n\r\nlet chars = str::code_points(\" .-:;+=xX$& \");\r\nlet yPixel = 0;\r\nwhile yPixel < 24 {\r\n  let y = yPixel / 12.0 - 1.0;\r\n  let xPixel = 0;\r\n  while xPixel < 80 {\r\n    let x = xPixel / 30.0 - 2.0;\r\n    let x0 = x;\r\n    let y0 = y;\r\n    let iter = 0;\r\n    while iter < 11.0 && (x0 * x0 + y0 * y0) <= 4.0 {\r\n      let x1 = (x0 * x0) - (y0 * y0) + x;\r\n      let y1 = 2.0 * x0 * y0 + y;\r\n      x0 = x1;\r\n      y0 = y1;\r\n      iter += 1;\r\n    }\r\n    print chars[iter];\r\n    xPixel += 1;\r\n  }\r\n  print \"\\n\";\r\n  yPixel += 1;\r\n}"};