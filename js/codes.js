const codes={"brainfuck.au":"// The simplest Turing-complete language written in Aument\r\n// https://en.wikipedia.org/wiki/Brainfuck\r\n\r\nlet instructions = str::bytes(io::input());\r\nlet ilen = list::len(instructions);\r\nlet tape = array::repeat(0, 8192);\r\nlet ip = 0;\r\nlet dp = 0;\r\nwhile ip < ilen {\r\n\tlet current_insn = instructions[ip];\r\n\tif current_insn == '>'c {\r\n\t\tdp += 1;\r\n\t} else if current_insn == '<'c {\r\n\t\tdp -= 1;\r\n\t} else if current_insn == '+'c {\r\n\t\ttape[dp] += 1;\r\n\t} else if current_insn == '-'c {\r\n\t\ttape[dp] -= 1;\r\n\t} else if current_insn == '.'c {\r\n\t\tprint str::char(tape[dp]);\r\n\t} else if current_insn == ','c {\r\n\t\ttape[dp] = int::into(io::input());\r\n\t} else if current_insn == '['c {\r\n\t\tif tape[dp] == 0 {\r\n\t\t\tlet loop = 1;\r\n\t\t\twhile loop > 0 {\r\n\t\t\t\tip += 1;\r\n\t\t\t\tcurrent_insn = instructions[ip];\r\n\t\t\t\tif current_insn == '['c {\r\n\t\t\t\t\tloop += 1;\r\n\t\t\t\t} else if current_insn == ']'c {\r\n\t\t\t\t\tloop -= 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if current_insn == ']'c {\r\n\t\tlet loop = 1;\r\n\t\twhile loop > 0 {\r\n\t\t\tip -= 1;\r\n\t\t\tlet current_insn = instructions[ip];\r\n\t\t\tif current_insn == '['c {\r\n\t\t\t\tloop -= 1;\r\n\t\t\t} else if current_insn == ']'c {\r\n\t\t\t\tloop += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tip -= 1;\r\n\t}\r\n\tip += 1;\r\n}","class.au":"struct Human { name }\n\nfunc human(name) {\n  return new Human {\n    name: name\n  };\n}\n\nfunc (self: Human) say() {\n  print \"I'm \", @name, \"\\n\";\n}\n\nstruct Cat;\n\nfunc (self: Cat) say() {\n  print \"meow!\";\n}\n\nlet alice = human(\"Alice\");\nlet bob = human(\"Bob\");\nlet cat = new Cat;\n\nalice.say();\nbob.say();\ncat.say();\n","fib.au":"func fib(n) {\n\tif n <= 1 {\n\t\treturn n;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n\nprint fib(28);\n","fizzbuzz.au":"let i = 0;\nwhile i < 100 {\n\tif i % 3 == 0 && i % 5 == 0 {\n\t\tprint \"Fizzbuzz\\n\";\n\t} else if i % 3 == 0 {\n\t\tprint \"Fizz\\n\";\n\t} else if i % 5 == 0 {\n\t\tprint \"Buzz\\n\";\n\t} else {\n\t\tprint i, \"\\n\";\n\t}\n\ti = i + 1;\n}\n","mandelbrot.au":"// Mandelbrot example adopted from Wren\r\n// https://github.com/wren-lang/wren/blob/main/example/mandelbrot.wren\r\n\r\nlet chars = str::code_points(\" .-:;+=xX$& \");\r\nlet yPixel = 0;\r\nwhile yPixel < 24 {\r\n\tlet y = yPixel / 12.0 - 1.0;\r\n\tlet xPixel = 0;\r\n\twhile xPixel < 80 {\r\n\t\tlet x = xPixel / 30.0 - 2.0;\r\n\t\tlet x0 = x;\r\n\t\tlet y0 = y;\r\n\t\tlet iter = 0;\r\n\t\twhile iter < 11.0 && (x0 * x0 + y0 * y0) <= 4.0 {\r\n\t\t\tlet x1 = (x0 * x0) - (y0 * y0) + x;\r\n\t\t\tlet y1 = 2.0 * x0 * y0 + y;\r\n\t\t\tx0 = x1;\r\n\t\t\ty0 = y1;\r\n\t\t\titer += 1;\r\n\t\t}\r\n\t\tprint chars[iter];\r\n\t\txPixel += 1;\r\n\t}\r\n\tprint \"\\n\";\r\n\tyPixel += 1;\r\n}"};